-- Create the comments table


CREATE TABLE comments (
    id UUID PRIMARY KEY,
    user_id UUID NOT NULL,
    post_id UUID NOT NULL,
    reply TEXT,
       "user" JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (post_id) REFERENCES posts(id)
);

-- Enable row-level security for the comments table
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;

-- Create a policy to allow authenticated users to insert data
CREATE POLICY "Insert policy"
ON comments
FOR INSERT
WITH CHECK (auth.uid() IS NOT NULL);

-- Create a policy to allow users to update their own comments
CREATE POLICY "Update policy"
ON comments
FOR UPDATE
USING (auth.uid() = user_id);

-- Create a policy to allow users to delete their own comments
CREATE POLICY "Delete policy"
ON comments
FOR DELETE
USING (auth.uid() = user_id);

-- Create a policy to allow users to select their own comments
CREATE POLICY "Select policy"
ON comments
FOR SELECT
USING (auth.uid() IS NOT NULL);



// comments trigger function


create or replace function comment_increment (count int, row_id uuid)
returns void as
$$
  update posts
  set comment_count = comment_count + count
  where id = row_id
$$
language sql;

