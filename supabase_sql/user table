CREATE TABLE users (
  id UUID PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(255),
  image VARCHAR(255),
  fcm_token VARCHAR(255),
  metadata JSONB,
  created_at TIMESTAMP DEFAULT NOW()
);

ALTER TABLE users ENABLE ROW LEVEL SECURITY;


ALTER TABLE users ALTER COLUMN email DROP NOT NULL;
ALTER TABLE users ADD CONSTRAINT unique_email UNIQUE (email);


CREATE POLICY "Insert policy"
ON users
FOR INSERT
WITH CHECK (auth.uid() IS NOT NULL);



// user triggger


-- Insert user trigger

create function public.add_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.users (id ,metadata, email)
  values (new.id ,new.raw_user_meta_data , new.email);
  return new;
end;
$$;


-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.add_new_user();








-- Create a trigger function for updates
create function public.update_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  update public.users
  set
    metadata = new.raw_user_meta_data,
    email = new.email
  where
    id = new.id;
  return new;
end;
$$;

